<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 보안을 체크할 필요가 없는 경로 설정 -->
	<security:http pattern="/resources/**" security="none"/>
	
	<!-- 보안 필터 체인(프로세싱) 설정 -->
	<security:http>
		<!-- 요청 경로 체크 -->
		<security:intercept-url pattern="/exam08/admin/**" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/exam08/user/**" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/**" access="permitAll"/>
		
		<!-- 로그인/로그아웃 설정 -->
		<security:form-login login-page="/exam08/loginForm"
												 username-parameter="uid"
												 password-parameter="upassword"
												 login-processing-url="/login"
												 authentication-failure-url="/exam08/loginForm"
												 authentication-success-handler-ref="authSuccessHandler"
												 authentication-failure-handler-ref="authFailureHandler"/>
		<!-- <security:csrf disabled="true"/> -->
		
		<!-- POST 방식으로 요청 -->
		<security:logout logout-url="/logout"/>
		
		<!-- 로그인 중복 처리 설정 -->
		<security:session-management>
				<!-- 기존 브라우저는 강제 아웃, 다른 브라우저는 로그인 -->
				<security:concurrency-control max-sessions="1"
																			error-if-maximum-exceeded="false"
																			expired-url="/exam08/loginForm"/>
				<!-- 기존 브라우저는 로그인 유지, 다른 브라우저는 에러 메시지 출력 -->
<!-- 								<security:concurrency-control max-sessions="1"
																			error-if-maximum-exceeded="true"/> -->					
		</security:session-management>
		
		<!-- 403에러가 발생할 때 이동할 페이지 -->
		
	</security:http>

	<!-- 사용자 인증 처리를 위한 설정 (DB 테이블 관련) -->
	<security:authentication-manager>
		<security:authentication-provider ref="daoAuthenticationProvider"/>
	</security:authentication-manager>
	
	<bean id="daoAuthenticationProvider"
				class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="passwordEncoder" ref="bCryptPasswordEncoder"/>
		<property name="userDetailsService" ref="jdbcUserService"/>
		<property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper"/>
	</bean>
	<bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<security:jdbc-user-service id="jdbcUserService"
			data-source-ref="dataSource"
			users-by-username-query="select userid, userpassword, userenabled from users where userid=?"
			authorities-by-username-query="select userid, userauthority from users where userid=?"/>
															
	<bean id="roleHierarchyAuthoritiesMapper" 
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
		<constructor-arg>
			<bean class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
				<property name="hierarchy">
					<value>
						ROLE_ADMIN > ROLE_MANAGER
						ROLE_MANAGER > ROLE_USER
					</value>
				</property>
			</bean>
		</constructor-arg>
	</bean>
	
	<!-- 로그인 성공했을 때와 실패했을 때 콜백되는 객체 설정 -->
	<bean id="authSuccessHandler"
				class="com.mycompany.webapp.security.AuthSuccessHandler"></bean>
	<bean id="authFailureHandler"
				class="com.mycompany.webapp.security.AuthFailureHandler">
			<property name="defaultFailureUrl" value="/exam08/loginForm"></property>			
	</bean>
</beans>
























